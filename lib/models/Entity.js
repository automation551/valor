// Generated by CoffeeScript 1.6.3
var Entity;

Entity = (function() {
  var objectCounter;

  Entity.prototype.layer = null;

  Entity.prototype.simulator = null;

  Entity.prototype.pos = new Vector2d(0, 0);

  Entity.prototype.vel = new Vector2d(0, 0);

  Entity.prototype.scaledV = new Vector2d(0, 0);

  Entity.prototype.doPos = new Vector2d(0, 0);

  Entity.prototype.w = 0;

  Entity.prototype.h = 0;

  Entity.prototype.hw = 0;

  Entity.prototype.hh = 0;

  Entity.prototype.zcode = 0;

  Entity.prototype.invmass = 1;

  Entity.prototype._sceneNode = null;

  Entity.prototype._displayObject = null;

  Entity.prototype.hash = 0;

  objectCounter = 0;

  Entity.prototype.lifetime = null;

  Entity.prototype.maxSpeed = null;

  Entity.prototype.bounciness = 0.5;

  Entity.prototype.friction = 0.8;

  function Entity(simulator, pos, vel, w, h) {
    var hh, hw;
    if (simulator != null) {
      this.simulator = simulator;
    }
    if (pos != null) {
      this.pos = pos;
    }
    if (vel != null) {
      this.vel = vel;
    }
    this.w = w;
    this.h = h;
    this.hw = hw = w / 2;
    this.hh = hh = h / 2;
    this._extent = new Extent(this.pos.x - hw, this.pos.y - hh, this.pos.x + hw, this.pos.y + hh);
    this.extent();
    this.hash = (objectCounter += 1);
    if (this.simulator != null) {
      this.simulator.insert(this);
    }
  }

  Entity.prototype.simulate = function(delta_s) {
    if (this.lifetime) {
      if (this.lifetime <= 0) {
        this.expire();
        return;
      } else {
        this.lifetime -= delta_s;
      }
    }
    if ((this.simulator != null) && !this.vel.isZero()) {
      this.scaledV.clear().add(this.vel).scaleXX(delta_s);
      this.simulator.dynamicTree.remove(this);
      this.pos.add(this.scaledV);
      this.simulator.dynamicTree.insert(this);
      return this.extent();
    }
  };

  Entity.prototype.collide = function(entity) {
    return Physics.resolve(this, entity);
  };

  Entity.prototype.extent = function() {
    this._extent.ul.x = this.pos.x - this.hw;
    this._extent.ul.y = this.pos.y - this.hh;
    this._extent.lr.x = this.pos.x + this.hw;
    this._extent.lr.y = this.pos.y + this.hh;
    return this._extent;
  };

  Entity.prototype.expire = function() {
    this.lifetime = 0;
    if (this.simulator != null) {
      this.simulator.remove(this);
    }
    if (this.simulator != null) {
      return delete this.simulator;
    }
  };

  Entity.prototype.alive = function() {
    if (this.lifetime === null) {
      return true;
    }
    return this.lifetime > 0;
  };

  return Entity;

})();
