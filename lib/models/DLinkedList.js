// Generated by CoffeeScript 1.6.3
var DLLNode, DLLNullNode, DLinkedList;

DLLNullNode = (function() {
  function DLLNullNode() {
    this.next = this.prev = this;
  }

  DLLNullNode.prototype.visit = function(callback, scope) {
    return this;
  };

  DLLNullNode.prototype.remove = function() {
    return this;
  };

  return DLLNullNode;

})();

DLLNode = (function() {
  function DLLNode(prev, value) {
    this.value = value;
    this.insert(prev);
  }

  DLLNode.prototype.insert = function(prev) {
    this.prev = prev;
    this.next = prev.next;
    return this.next.prev = prev.next = this;
  };

  DLLNode.prototype.visit = function(callback) {
    return callback(this.value);
  };

  DLLNode.prototype.remove = function() {
    this.prev.next = this.next;
    this.next.prev = this.prev;
    this.prev = null;
    return this;
  };

  return DLLNode;

})();

DLinkedList = (function() {
  function DLinkedList() {
    this.head = new DLLNullNode();
    this.length = 0;
    this.nodes = {};
  }

  DLinkedList.prototype.insert = function(value, hash) {
    var node;
    this.length += 1;
    node = new DLLNode(this.head, value);
    return this.nodes[hash] = node;
  };

  DLinkedList.prototype.insertNode = function(node) {
    this.length += 1;
    return node.insert(this.head);
  };

  DLinkedList.prototype.remove = function(hash) {
    this.length -= 1;
    this.nodes[hash].remove();
    return delete this.nodes[hash];
  };

  DLinkedList.prototype.each = function(callback) {
    var cur, next;
    cur = this.head.next;
    while (cur !== this.head) {
      next = cur.next;
      cur.visit(callback);
      cur = next;
    }
    return null;
  };

  DLinkedList.prototype.all = function() {
    var res;
    res = [];
    this.each(function(o) {
      return res.push(o);
    });
    return res;
  };

  return DLinkedList;

})();
