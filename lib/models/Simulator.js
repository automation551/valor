// Generated by CoffeeScript 1.6.3
var DLinkedList, Physics, Simulator, ZTree;

ZTree = require("./ZTree.js");

DLinkedList = require("./DLinkedList.js");

Physics = require("./Physics.js");

Simulator = (function() {
  function Simulator() {
    this.staticTree = new ZTree;
    this.dynamicTree = new ZTree;
    this.dynamicEntities = new DLinkedList;
    this.collisions = {};
    this.collObjs = [];
    Simulator.simulator = this;
  }

  Simulator.prototype.insert = function(entity) {
    this.dynamicTree.insert(entity);
    return this.dynamicEntities.insert(entity, entity.hash);
  };

  Simulator.prototype.remove = function(entity) {
    this.dynamicTree.remove(entity);
    return this.dynamicEntities.remove(entity.hash);
  };

  Simulator.prototype.insertStatic = function(entity) {
    return this.staticTree.insert(entity);
  };

  Simulator.prototype.step = function(game, timestamp, delta_s) {
    var _this = this;
    this.collisions = {};
    this.collObjs = [];
    return this.dynamicEntities.each(function(entity) {
      var tree, _i, _len, _ref, _results;
      entity.simulate(delta_s);
      _ref = [_this.staticTree, _this.dynamicTree];
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        tree = _ref[_i];
        _results.push(tree.searchExpand(entity._extent, 16, 16, function(nearEntity) {
          var pair;
          if (entity === nearEntity) {
            return false;
          }
          pair = this.pair(entity.hash, nearEntity.hash);
          if (this.collisions[pair]) {
            return false;
          }
          if (Physics.collision(entity._extent, nearEntity._extent)) {
            entity.collide(nearEntity);
            nearEntity.collide(entity);
            this.collisions[pair] = true;
            this.collObjs.push(nearEntity);
            return this.collObjs.push(entity);
          }
        }, _this));
      }
      return _results;
    });
  };

  Simulator.prototype.pair = function(a, b) {
    if (a >= b) {
      return a * a + a + b;
    } else {
      return a + b * b;
    }
  };

  return Simulator;

})();

module.exports = Simulator;
