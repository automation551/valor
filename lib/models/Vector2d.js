// Generated by CoffeeScript 1.6.3
var Vector2d;

Vector2d = (function() {
  function Vector2d(x, y) {
    this.x = x || 0;
    this.y = y || 0;
    this.__x = this.x;
    this.__y = this.y;
  }

  Vector2d.prototype.clear = function() {
    this.x = this.y = 0;
    return this;
  };

  Vector2d.prototype.reset = function() {
    this.x = this.__x;
    this.y = this.__y;
    return this;
  };

  Vector2d.prototype.add = function(v) {
    if (typeof v === 'undefined') {
      debugger;
    }
    if (arguments.length !== 1) {
      debugger;
    }
    return this.addXY(v.x, v.y);
  };

  Vector2d.prototype.addPolar = function(r, theta) {
    if (r === NaN) {
      debugger;
    }
    if (theta === NaN) {
      debugger;
    }
    if (arguments.length !== 2) {
      debugger;
    }
    if (typeof r !== 'number') {
      debugger;
    }
    if (typeof theta !== 'number') {
      debugger;
    }
    return this.addXY(r * Math.sin(theta), r * -Math.cos(theta));
  };

  Vector2d.prototype.addXY = function(x, y) {
    if (x === NaN) {
      debugger;
    }
    if (y === NaN) {
      debugger;
    }
    if (arguments.length !== 2) {
      debugger;
    }
    if (typeof x !== 'number') {
      debugger;
    }
    if (typeof y !== 'number') {
      debugger;
    }
    this.x += x;
    this.y += y;
    return this;
  };

  Vector2d.prototype.sub = function(v) {
    if (typeof v === 'undefined') {
      debugger;
    }
    if (arguments.length !== 1) {
      debugger;
    }
    this.addXY(-v.x, -v.y);
    return this;
  };

  Vector2d.prototype.subXY = function(x, y) {
    this.addXY(-x, -y);
    return this;
  };

  Vector2d.prototype.dot = function(v) {
    if (arguments.length !== 1) {
      debugger;
    }
    if (typeof v === 'undefined') {
      debugger;
    }
    if (typeof v.x !== 'number') {
      debugger;
    }
    if (typeof v.y !== 'number') {
      debugger;
    }
    return this.x * v.x + this.y * v.y;
  };

  Vector2d.prototype.scale = function(v) {
    if (typeof v === 'undefined') {
      debugger;
    }
    if (arguments.length !== 1) {
      debugger;
    }
    this.scaleXY(v.x, v.y);
    return this;
  };

  Vector2d.prototype.scaleXY = function(x, y) {
    if (arguments.length !== 2) {
      debugger;
    }
    if (typeof x !== 'number') {
      debugger;
    }
    if (typeof y !== 'number') {
      debugger;
    }
    if (x === NaN) {
      debugger;
    }
    if (y === NaN) {
      debugger;
    }
    this.x *= x;
    this.y *= y;
    return this;
  };

  Vector2d.prototype.scaleXX = function(x) {
    this.scaleXY(x, x);
    return this;
  };

  Vector2d.prototype.lshift = function(power) {
    this.x <<= power;
    this.y <<= power;
    return this;
  };

  Vector2d.prototype.rshift = function(power) {
    this.x >>>= power;
    this.y >>>= power;
    return this;
  };

  Vector2d.prototype.clamp = function(clamp) {
    this.clamp4(clamp.x, clamp.y, clamp.x, clamp.y);
    return this;
  };

  Vector2d.prototype.clamp4 = function(x1, x2, y1, y2) {
    if (x1 === NaN) {
      debugger;
    }
    if (y1 === NaN) {
      debugger;
    }
    if (x2 === NaN) {
      debugger;
    }
    if (y2 === NaN) {
      debugger;
    }
    if (typeof x1 !== 'number') {
      debugger;
    }
    if (typeof x2 !== 'number') {
      debugger;
    }
    if (typeof y1 !== 'number') {
      debugger;
    }
    if (typeof y2 !== 'number') {
      debugger;
    }
    this.x = this.x.clamp(x1, x2);
    this.y = this.y.clamp(y1, y2);
    return this;
  };

  return Vector2d;

})();
