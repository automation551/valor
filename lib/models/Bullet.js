// Generated by CoffeeScript 1.6.3
var Bullet,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Bullet = (function(_super) {
  var base, row, textures, x, y, _i, _j;

  __extends(Bullet, _super);

  Bullet.prototype.bounciness = 1;

  Bullet.prototype.friction = 0;

  Bullet.prototype.damage = 200;

  Bullet.prototype.speed = 100;

  Bullet.prototype.w = 5;

  Bullet.prototype.h = 5;

  base = PIXI.BaseTexture.fromImage("assets/shared/graphics/bullets.png");

  textures = [];

  for (y = _i = 0; _i <= 9; y = ++_i) {
    row = [];
    for (x = _j = 0; _j <= 3; x = ++_j) {
      row.push(new PIXI.Texture(base, {
        x: x * 5,
        y: y * 5,
        width: 5,
        height: 5
      }));
    }
    textures.push(row);
  }

  function Bullet(ship, simulator, level, bouncing) {
    var movieRow;
    this.ship = ship;
    this.simulator = simulator;
    this.level = level;
    this.bouncing = bouncing;
    this.lifetime = 10;
    Bullet.__super__.constructor.call(this, Layer.layers['projectile'], simulator, new Vector2d(0, 0).add(ship.pos).addPolar(ship.hw, ship.angle), new Vector2d(0, 0).add(ship.vel).addPolar(this.speed, ship.angle), this.w, this.h);
    movieRow = level;
    if (bouncing) {
      movieRow += 5;
    }
    this._movie = new PIXI.MovieClip(textures[movieRow]);
    this._movie.width = this.w;
    this._movie.height = this.h;
    this._movie.anchor.x = 0.5;
    this._movie.anchor.y = 0.5;
    this._movie.loop = true;
    this._movie.animationSpeed = 0.5;
    this._movie.play();
    this._displayObject = this._movie;
  }

  Bullet.prototype.collide = function(object) {
    if (object.constructor === Tile) {
      if (object.index === 170) {
        return;
      } else if (this.bouncing) {
        Bullet.__super__.collide.call(this, object);
      }
    }
    if (object.constructor === Ship && object !== this.ship) {
      object.onDamage(this, this.damage);
      this.expire();
      return Effect.create('explode0', this.pos, null);
    }
  };

  Bullet.prototype.update = function() {
    if (this.ship.safe) {
      this.layer.remove(this);
      this.layer.removeChild(this);
      this.simulator.removeObject(this);
    }
    return Bullet.__super__.update.call(this);
  };

  return Bullet;

})(Entity);
