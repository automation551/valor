// Generated by CoffeeScript 1.6.3
var Scene;

Scene = (function() {
  Scene.prototype.stage = null;

  Scene.prototype.renderer = null;

  Scene.prototype.layers = {};

  Scene.prototype.views = {};

  Scene.prototype.debug = document.getElementById('debug');

  Scene.prototype.layerOrder = ["Starfield", "Map", "Projectiles", "Other ships", "Selfship", "Effects", "HUD"];

  function Scene(game, client) {
    var doc, name, _i, _len, _ref;
    this.game = game;
    this.client = client;
    this.initPixi();
    _ref = this.layerOrder;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      name = _ref[_i];
      doc = new PIXI.DisplayObjectContainer();
      this.stage.addChild(doc);
      this.layers[name] = doc;
    }
    this.width = document.body.clientWidth;
    this.height = window.innerHeight;
    this.viewport = new Viewport(this.width, this.height);
    this.viewport.pos = game.ship.pos;
    this.starfield = new Starfield(this.layers["Starfield"], this.viewport);
  }

  Scene.prototype.initPixi = function() {
    this.stage = new PIXI.Stage(0, false);
    this.renderer = PIXI.autoDetectRenderer(this.width, this.height, document.createElement('canvas'), false, false);
    this.renderer.view.style.position = "absolute";
    this.renderer.view.style.top = "0px";
    this.renderer.view.style.left = "0px";
    document.body.appendChild(this.renderer.view);
    return $(window).resize(function() {
      this.width = document.body.clientWidth;
      this.height = window.innerHeight;
      return this.renderer.resize(this.width, this.height);
    });
  };

  Scene.prototype.step = function(game, timestamp, delta_s) {
    var hash, updated, view, _ref, _ref1;
    this.viewport.extent();
    this.starfield.update();
    _ref = this.views;
    for (hash in _ref) {
      view = _ref[hash];
      view.displayed = false;
    }
    game.simulator.staticTree.searchExpand(this.viewport._extent, 16, 16, this.buildView, this);
    game.simulator.dynamicTree.searchExpand(this.viewport._extent, 16, 16, this.buildView, this);
    _ref1 = this.views;
    for (hash in _ref1) {
      view = _ref1[hash];
      updated = view.update(this.viewport);
      if (!(view.displayed && updated)) {
        view.remove();
        delete this.views[hash];
      }
    }
    return this.renderer.render(this.stage);
  };

  Scene.prototype.buildView = function(entity) {
    var view;
    view = this.views[entity.hash];
    if (!view) {
      view = View.build(this, entity);
      if (!view.displayObject) {
        return;
      }
      this.views[entity.hash] = view;
    }
    if (view) {
      return view.displayed = true;
    }
  };

  Scene.prototype.objects = function() {
    var layer, name, sum, _ref;
    sum = 0;
    _ref = this.layers;
    for (name in _ref) {
      layer = _ref[name];
      sum += layer.children.length;
    }
    return sum;
  };

  return Scene;

})();
