// Generated by CoffeeScript 1.6.3
var Client, KeyEvent;

Client = (function() {
  var adjPoint;

  function Client(game) {
    var _this = this;
    this.game = game;
    this.events = [];
    document.addEventListener("keydown", function(e) {
      return _this.keyListen(e, true);
    });
    document.addEventListener("keyup", function(e) {
      return _this.keyListen(e, false);
    });
    this.scene = new Scene(game, this);
    game.register(new AI);
    game.register(this);
    game.register(this.scene);
    game.before = function() {
      return _this.stats.begin();
    };
    game.after = function() {
      return _this.stats.end();
    };
    this.keys = {
      debugMessages: false
    };
    game.load(function(bmpData, tiles) {
      return TileView.load(bmpData);
    });
  }

  Client.prototype.start = function() {
    return this.game.step(0, requestAnimationFrame);
  };

  Client.prototype.step = function(game, timestamp, delta_s) {
    this.events.push(event(timestamp));
    this.game.ship.onKeys(this.keys, this.game.simulator, delta_s);
    if (this.keys.debugCollisions) {
      this.drawDebugCollisions(this.game.ship, this.game.simulator.collisions);
    }
    if (this.keys.debugMessages) {
      return this.drawDebug({
        ship: [this.ship.pos.x, this.ship.pos.y, this.ship.rawAngle, this.ship.angle],
        shipVel: [this.ship.vel.x, this.ship.vel.y],
        fps: 1 / delta_s,
        keys: this.keys,
        objects: this.scene.objects(),
        children: this.scene.stage.children.length,
        tiles: this.mapLayer.entities,
        ships: this.otherShipsLayer.entities,
        projectiles: this.projectileLayer.entities
      });
    }
  };

  Client.prototype.objects = function() {
    var layer, sum, _i, _len, _ref;
    sum = 0;
    _ref = this.layers;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      layer = _ref[_i];
      sum += layer.container.children.length;
    }
    return sum;
  };

  Client.prototype.drawDebug = function(obj) {
    var inspect;
    inspect = function(o, d, omitKey) {
      var k, rep, str, v, _results;
      if (d == null) {
        d = 0;
      }
      if (omitKey == null) {
        omitKey = false;
      }
      if (d >= 5) {
        return ['...'];
      }
      _results = [];
      for (k in o) {
        v = o[k];
        str = omitKey ? "" : "" + k + ": ";
        if (k.indexOf("_") !== -1) {
          str += "<" + k + ">";
        } else {
          if (typeof v === "object") {
            if (Array.isArray(v)) {
              str += "[" + (inspect(v, d + 1, true).join(', ')) + "]";
            } else {
              str += "{" + (inspect(v, d + 1).join(', ')) + "}";
            }
          } else {
            rep = JSON.stringify(v);
            if (rep === 'null') {
              rep = v.toString();
            }
            str += rep;
          }
        }
        _results.push(str);
      }
      return _results;
    };
    return $(this.debug).html(inspect(obj).join('<br/>'));
  };

  adjPoint = new Vector2d;

  Client.prototype.drawDebugCollisions = function(ship, objects) {
    var graphics, object, _i, _len;
    if (!this.collisionGraphics) {
      this.collisionGraphics = new PIXI.Graphics;
      this.scene.stage.addChild(this.collisionGraphics);
    }
    this.collisionGraphics.clear();
    graphics = this.collisionGraphics;
    graphics.beginFill(0x0000FF);
    graphics.drawRect(0, 0, 50, 50);
    graphics.endFill();
    graphics.beginFill(0xFF0000, 0.5);
    for (_i = 0, _len = objects.length; _i < _len; _i++) {
      object = objects[_i];
      adjPoint.clear().add(object._extent.ul).sub(this.scene.viewport._extent.ul);
      graphics.drawRect(adjPoint.x, adjPoint.y, object.w, object.h);
    }
    graphics.endFill();
    graphics.beginFill(0x00FF00, 0.5);
    adjPoint.clear().add(ship._extent.ul).sub(this.scene.viewport._extent.ul);
    graphics.drawRect(adjPoint.x, adjPoint.y, ship.w, ship.h);
    graphics.endFill();
    if (this.keys["debugger"]) {
      debugger;
    }
  };

  Client.prototype.keyListen = function(e, set) {
    var listened;
    if (set == null) {
      set = true;
    }
    listened = true;
    switch (e.keyCode) {
      case KeyEvent.DOM_VK_LEFT:
        this.keys.left = set;
        break;
      case KeyEvent.DOM_VK_RIGHT:
        this.keys.right = set;
        break;
      case KeyEvent.DOM_VK_UP:
        this.keys.up = set;
        break;
      case KeyEvent.DOM_VK_DOWN:
        this.keys.down = set;
        break;
      case KeyEvent.DOM_VK_S:
        this.keys.fullstop = set;
        break;
      case KeyEvent.DOM_VK_D:
        this.keys["debugger"] = set;
        break;
      case KeyEvent.DOM_VK_N:
        if (set) {
          this.keys.noclip = !this.keys.noclip;
        }
        break;
      case KeyEvent.DOM_VK_M:
        if (set) {
          this.keys.debugMessages = !this.keys.debugMessages;
        }
        break;
      case KeyEvent.DOM_VK_C:
        if (set) {
          this.keys.debugCollisions = !this.keys.debugCollisions;
        }
        break;
      case KeyEvent.DOM_VK_SPACE:
        this.keys.fire = set;
        break;
      default:
        listened = false;
    }
    if (listened) {
      e.preventDefault();
      return e.stopPropagation();
    }
  };

  Client.prototype.event = function(timestamp) {
    return {
      timestamp: timestamp,
      left: this.keys.left,
      right: this.keys.right,
      up: this.keys.up,
      down: this.keys.down,
      fire: this.keys.fire
    };
  };

  Client.prototype.initStats = function() {
    this.stats = new Stats();
    this.stats.setMode(0);
    this.stats.domElement.style.position = 'absolute';
    this.stats.domElement.style.right = '0px';
    this.stats.domElement.style.top = '0px';
    this.stats.domElement.style.zIndex = '10';
    return document.body.appendChild(this.stats.domElement);
  };

  return Client;

})();

if (typeof KeyEvent === "undefined") {
  KeyEvent = {
    DOM_VK_CANCEL: 3,
    DOM_VK_HELP: 6,
    DOM_VK_BACK_SPACE: 8,
    DOM_VK_TAB: 9,
    DOM_VK_CLEAR: 12,
    DOM_VK_RETURN: 13,
    DOM_VK_ENTER: 14,
    DOM_VK_SHIFT: 16,
    DOM_VK_CONTROL: 17,
    DOM_VK_ALT: 18,
    DOM_VK_PAUSE: 19,
    DOM_VK_CAPS_LOCK: 20,
    DOM_VK_ESCAPE: 27,
    DOM_VK_SPACE: 32,
    DOM_VK_PAGE_UP: 33,
    DOM_VK_PAGE_DOWN: 34,
    DOM_VK_END: 35,
    DOM_VK_HOME: 36,
    DOM_VK_LEFT: 37,
    DOM_VK_UP: 38,
    DOM_VK_RIGHT: 39,
    DOM_VK_DOWN: 40,
    DOM_VK_PRINTSCREEN: 44,
    DOM_VK_INSERT: 45,
    DOM_VK_DELETE: 46,
    DOM_VK_0: 48,
    DOM_VK_1: 49,
    DOM_VK_2: 50,
    DOM_VK_3: 51,
    DOM_VK_4: 52,
    DOM_VK_5: 53,
    DOM_VK_6: 54,
    DOM_VK_7: 55,
    DOM_VK_8: 56,
    DOM_VK_9: 57,
    DOM_VK_SEMICOLON: 59,
    DOM_VK_EQUALS: 61,
    DOM_VK_A: 65,
    DOM_VK_B: 66,
    DOM_VK_C: 67,
    DOM_VK_D: 68,
    DOM_VK_E: 69,
    DOM_VK_F: 70,
    DOM_VK_G: 71,
    DOM_VK_H: 72,
    DOM_VK_I: 73,
    DOM_VK_J: 74,
    DOM_VK_K: 75,
    DOM_VK_L: 76,
    DOM_VK_M: 77,
    DOM_VK_N: 78,
    DOM_VK_O: 79,
    DOM_VK_P: 80,
    DOM_VK_Q: 81,
    DOM_VK_R: 82,
    DOM_VK_S: 83,
    DOM_VK_T: 84,
    DOM_VK_U: 85,
    DOM_VK_V: 86,
    DOM_VK_W: 87,
    DOM_VK_X: 88,
    DOM_VK_Y: 89,
    DOM_VK_Z: 90,
    DOM_VK_CONTEXT_MENU: 93,
    DOM_VK_NUMPAD0: 96,
    DOM_VK_NUMPAD1: 97,
    DOM_VK_NUMPAD2: 98,
    DOM_VK_NUMPAD3: 99,
    DOM_VK_NUMPAD4: 100,
    DOM_VK_NUMPAD5: 101,
    DOM_VK_NUMPAD6: 102,
    DOM_VK_NUMPAD7: 103,
    DOM_VK_NUMPAD8: 104,
    DOM_VK_NUMPAD9: 105,
    DOM_VK_MULTIPLY: 106,
    DOM_VK_ADD: 107,
    DOM_VK_SEPARATOR: 108,
    DOM_VK_SUBTRACT: 109,
    DOM_VK_DECIMAL: 110,
    DOM_VK_DIVIDE: 111,
    DOM_VK_F1: 112,
    DOM_VK_F2: 113,
    DOM_VK_F3: 114,
    DOM_VK_F4: 115,
    DOM_VK_F5: 116,
    DOM_VK_F6: 117,
    DOM_VK_F7: 118,
    DOM_VK_F8: 119,
    DOM_VK_F9: 120,
    DOM_VK_F10: 121,
    DOM_VK_F11: 122,
    DOM_VK_F12: 123,
    DOM_VK_F13: 124,
    DOM_VK_F14: 125,
    DOM_VK_F15: 126,
    DOM_VK_F16: 127,
    DOM_VK_F17: 128,
    DOM_VK_F18: 129,
    DOM_VK_F19: 130,
    DOM_VK_F20: 131,
    DOM_VK_F21: 132,
    DOM_VK_F22: 133,
    DOM_VK_F23: 134,
    DOM_VK_F24: 135,
    DOM_VK_NUM_LOCK: 144,
    DOM_VK_SCROLL_LOCK: 145,
    DOM_VK_COMMA: 188,
    DOM_VK_PERIOD: 190,
    DOM_VK_SLASH: 191,
    DOM_VK_BACK_QUOTE: 192,
    DOM_VK_OPEN_BRACKET: 219,
    DOM_VK_BACK_SLASH: 220,
    DOM_VK_CLOSE_BRACKET: 221,
    DOM_VK_QUOTE: 222,
    DOM_VK_META: 224
  };
}
