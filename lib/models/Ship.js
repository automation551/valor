// Generated by CoffeeScript 1.6.3
Math.mod = function(a,b) {
    var r = a % b;
    var m = a === 0 ? 0 : (b > 0 ? (a >= 0 ? r : r+b) : -Math.mod(-a,-b));

    return m === b ? 0 : m;
  }
;
var Ship,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Ship = (function(_super) {
  __extends(Ship, _super);

  Ship.prototype.rawAngle = 0;

  Ship.prototype.angle = 0;

  Ship.prototype.safe = false;

  Ship.prototype.maxSpeed = 500;

  Ship.prototype.noclip = false;

  Ship.prototype.gunTimeoutDefault = 0.5;

  Ship.prototype.gunTimeout = 0;

  Ship.prototype.maxEnergy = 1000;

  Ship.prototype.energy = Ship.prototype.maxEnergy;

  Ship.prototype.fireEnergy = 20;

  function Ship(simulator, player, options) {
    this.posClamp = new Vector2d(0, 1024 * 16);
    this.velClamp = new Vector2d(-this.maxSpeed, this.maxSpeed);
    Ship.__super__.constructor.call(this, simulator, new Vector2d(8136, 11428), new Vector2d(0, 0), 32, 32);
    this.player = player;
    this.options = options;
    this.keys = options.keys;
    this.gunTimeout = this.gunTimeoutDefault;
    this.safety = new Extent(Infinity, Infinity, -1, -1);
    this.energy = this.maxEnergy;
    this.bullets = [];
  }

  Ship.prototype.simulate = function(delta) {
    var bullet, _i, _len, _ref;
    this.vel.clamp(this.velClamp);
    if (this.gunTimeout > 0) {
      this.gunTimeout -= delta;
    }
    this.angle = (Math.round(this.rawAngle * 40) / 40) * Math.PI * 2;
    Ship.__super__.simulate.call(this, delta);
    this.safe = this.safety.surrounds(this._extent);
    if (this.safe) {
      _ref = this.bullets;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        bullet = _ref[_i];
        if (bullet.lifetime > 0) {
          bullet.expire();
        }
      }
      this.bullets = [];
    }
    this.safety.reset();
    this.pos.clamp(this.posClamp);
    this.tx = this.pos.x / 16;
    return this.ty = this.pos.y / 16;
  };

  Ship.prototype.collide = function(entity) {
    if (entity.constructor !== Tile) {
      return;
    }
    if (entity.index === 170) {
      this.safety.minmax(entity._extent);
    }
    if (!this.noclip && entity.index !== 170) {
      return Ship.__super__.collide.call(this, entity);
    }
  };

  Ship.prototype.onKeys = function(keys, simulator, delta_s) {
    var x, y;
    x = 0;
    if (keys.left) {
      x -= 1;
    }
    if (keys.right) {
      x += 1;
    }
    y = 0;
    if (keys.up) {
      y += 1;
    }
    if (keys.down) {
      y -= 1;
    }
    this.rawAngle += 0.7 * delta_s * x;
    this.vel.addPolar(400 * delta_s * y, this.angle);
    if (keys.fullstop) {
      this.vel.clear();
    }
    if (keys.fire) {
      if (this.safe) {
        this.vel.clear();
      } else if (this.gunTimeout <= 0 && this.energy >= this.fireEnergy) {
        this.energy -= this.fireEnergy;
        this.bullets.push(new Bullet(this, simulator, 2, true));
        this.gunTimeout = this.gunTimeoutDefault;
      }
    }
    return this.noclip = keys.noclip;
  };

  Ship.prototype.onDamage = function(projectile, damage) {
    if (!this.alive()) {
      return;
    }
    if (this.safe) {
      return;
    }
    this.energy -= damage;
    if (this.energy <= 0) {
      return this.explode();
    }
  };

  Ship.prototype.alive = function() {
    if (this.energy <= 0) {
      return false;
    }
    return Ship.__super__.alive.call(this);
  };

  Ship.prototype.explode = function() {
    this.expire();
    return Effect.create('explode1', this.pos, this.vel);
  };

  return Ship;

})(Entity);
