"Networking for Physics Programmers": http://bit.ly/9CFzWb page 63
"Netorked Physics:" http://gafferongames.com/game-physics/networked-physics/
http://www.html5rocks.com/en/tutorials/webrtc/datachannels/
http://chimera.labs.oreilly.com/books/1230000000545/ch18.html
https://github.com/js-platform/node-webrtc
git clone https://code.google.com/p/cubeslam/
https://github.com/muaz-khan/WebRTC-Experiment/tree/master/DataChannel
http://www.html5rocks.com/en/tutorials/webrtc/infrastructure/
https://pusher.com/tutorials/webrtc_chat
https://code.google.com/p/cubeslam/source/checkout
https://bitbucket.org/webrtc/codelab
http://www.html5rocks.com/en/tutorials/webrtc/basics/
https://github.com/samdutton/simpl/blob/master/rtcdatachannel/js/main.js
http://simpl.info/rtcdatachannel/
http://www.html5rocks.com/en/tutorials/webrtc/datachannels/
https://github.com/iStefo/uni/blob/master/computer_networks/exam.md
http://gafferongames.com/networking-for-game-programmers/floating-point-determinism/

Aim for: 64kbps, 30pps, 2.133kb/packet, ~266bytes/packet
Determinism:
  The floats used in doing client side prediction are not the same as received by the server, resulting in a lot of snaps.
  We need to switch to integers, or somehow simulate the json, or use not-json + float32
  https://blog.mozilla.org/javascript/2013/11/07/efficient-float32-arithmetic-in-javascript/
  https://github.com/creationix/msgpack-js-browser.git
  https://github.com/creationix/msgpack-js
  Let's try msgpack!
  Use stats.js or hack it to display error
  use client/server logs to replay and see error (expected vs actual)

  msgpack results: it doesn't help and truncates the floats. so. and it's also a lot slower than json.
  

Debugging:
  Graph view from https://developer.valvesoftware.com/wiki/Source_Multiplayer_Networking

New networking code:
  Want something that will be pretty general for client/server. 

Random:
We have to convert to integer to search in the collision tree, is this slow? Do we have to? (Perhaps only on add/remove)
http://jsperf.com/float-to-int-conversion-comparison
103,664,858/second says we don't have to worry too much
https://github.com/spencertipping/flotsam
http://feclib.sourceforge.net/
http://jerasure.org/
