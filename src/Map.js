// Generated by CoffeeScript 1.6.3
var Map;

Map = (function() {
  function Map(oEvent) {
    var _ref;
    _ref = this.parseLevel(oEvent), this.tileset = _ref[0], this.tiles = _ref[1];
    this.spriteWidth = this.spriteHeight = 16;
    this.spriteMapWidth = 19;
    this.spriteMapHeight = 10;
    this.mapWidth = this.mapHeight = 1024;
    this.mapWidthP = this.mapHeightP = 1024 * this.spriteWidth;
  }

  Map.prototype.draw = function(viewport, ship, ctx) {
    var east, north, res, south, tile, west;
    west = ship.x - viewport.width / 2;
    north = ship.y - viewport.height / 2;
    east = ship.x + viewport.width / 2;
    south = ship.y + viewport.height / 2;
    res = (function() {
      var _i, _len, _ref, _ref1, _ref2, _results;
      _ref = this.tiles;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        tile = _ref[_i];
        if ((west - 16 <= (_ref1 = tile.x * 16) && _ref1 <= east) && (north - 16 <= (_ref2 = tile.y * 16) && _ref2 <= south)) {
          _results.push(this.drawTile(viewport, ship, ctx, tile));
        }
      }
      return _results;
    }).call(this);
    return res;
  };

  Map.prototype.drawTile = function(viewport, ship, ctx, tile) {
    var args, col, info, mxp, myp, origin, row, smxp, smyp, vpmxp, vpmyp;
    origin = {
      x: ship.x - viewport.width / 2,
      y: ship.y - viewport.height / 2
    };
    row = Math.floor((tile.index - 1) / this.spriteMapWidth);
    col = (tile.index - 1) % this.spriteMapWidth;
    smxp = col * this.spriteWidth;
    smyp = row * this.spriteHeight;
    mxp = tile.x * this.spriteWidth;
    myp = tile.y * this.spriteHeight;
    vpmxp = mxp - origin.x;
    vpmyp = myp - origin.y;
    args = [this.tileset, smxp, smyp, this.spriteWidth, this.spriteHeight, vpmxp, vpmyp, this.spriteWidth, this.spriteHeight];
    info = {
      smxp: smxp,
      smyp: smyp,
      vpmxp: vpmxp,
      vpmyp: vpmyp,
      tile: tile.index,
      x: tile.x,
      y: tile.y
    };
    ctx.drawImage.apply(ctx, args);
    return info;
  };

  Map.prototype.parseLevel = function(oEvent) {
    var a, arrayBuffer, bmp, bmpLength, bmp_data, bmp_size, bytes, canvas, i, index, mapStruct, struct, tiles, x, y;
    arrayBuffer = oEvent.target.response;
    if (!arrayBuffer) {
      return [];
    }
    bmpLength = restruct.int32lu("length");
    mapStruct = restruct.int32lu("struct");
    tiles = [];
    a = new Uint8Array(arrayBuffer);
    bmp_size = bmpLength.unpack(a.subarray(2, 6)).length;
    bmp_data = a.subarray(0, bmp_size);
    bmp = new BMPImage(bmp_data.buffer);
    canvas = document.createElement("canvas");
    canvas.name = "tileset";
    bmp.drawToCanvas(canvas);
    i = bmp_size;
    while (i < a.length) {
      bytes = a.subarray(i, i + 4);
      struct = mapStruct.unpack(bytes).struct;
      x = struct & 0x03FF;
      y = (struct >>> 12) & 0x03FF;
      index = struct >>> 24;
      tiles.push({
        x: x,
        y: y,
        index: index,
        meta: [i, length, bytes, struct, struct.toString(2)]
      });
      i += 4;
    }
    return [canvas, tiles];
  };

  return Map;

})();
